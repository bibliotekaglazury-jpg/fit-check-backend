import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import dotenv from 'dotenv';

// –ò–º–ø–æ—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤
import authRoutes from './routes/authRoutes';
import wardrobeRoutes from './routes/wardrobeRoutes';
import aiRoutes from './routes/aiRoutes';

// –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç
import { connectDatabase, disconnectDatabase } from './utils/database';
import { logger } from './utils';
import { AppError } from './types';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const app = express();
const PORT = process.env.PORT || 5000;

// –ë–∞–∑–æ–≤—ã–µ middleware
app.use(helmet()); // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true
})); // CORS
app.use(express.json({ limit: '50mb' })); // –ü–∞—Ä—Å–∏–Ω–≥ JSON (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
app.use(express.urlencoded({ extended: true, limit: '50mb' })); // –ü–∞—Ä—Å–∏–Ω–≥ URL-encoded –¥–∞–Ω–Ω—ã—Ö

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'));
} else {
  app.use(morgan('combined'));
}

// –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞ - –ø—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
app.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'Fit-Check Backend is running!',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// API —Ä–æ—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/wardrobe', wardrobeRoutes);
app.use('/api/ai', aiRoutes);

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fit-Check API! üëó‚ú®',
    version: '1.0.0',
    documentation: '/api/docs',
    endpoints: {
      auth: '/api/auth',
      wardrobe: '/api/wardrobe',
      ai: '/api/ai',
      health: '/health'
    }
  });
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 404 –æ—à–∏–±–æ–∫ (–º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)
app.use((req, res) => {
  res.status(404).json({
    success: false,
    message: `–ú–∞—Ä—à—Ä—É—Ç ${req.originalUrl} –Ω–µ –Ω–∞–π–¥–µ–Ω`
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  logger.error('Unhandled error:', error);

  // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Multer (–∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤)
  if (error.code === 'LIMIT_FILE_SIZE') {
    return res.status(400).json({
      success: false,
      message: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB'
    });
  }

  if (error.code === 'LIMIT_FILE_COUNT') {
    return res.status(400).json({
      success: false,
      message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤'
    });
  }

  if (error.code === 'LIMIT_UNEXPECTED_FILE') {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ —Ñ–∞–π–ª–∞'
    });
  }

  // –û—à–∏–±–∫–∏ Prisma (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
  if (error.code === 'P2002') {
    return res.status(409).json({
      success: false,
      message: '–î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç'
    });
  }

  if (error.code === 'P2025') {
    return res.status(404).json({
      success: false,
      message: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
    });
  }

  // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  if (error instanceof AppError) {
    return res.status(error.statusCode).json({
      success: false,
      message: error.message
    });
  }

  // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON
  if (error instanceof SyntaxError && error.message.includes('JSON')) {
    return res.status(400).json({
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON'
    });
  }

  // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
  const isDevelopment = process.env.NODE_ENV === 'development';
  
  res.status(500).json({
    success: false,
    message: isDevelopment ? error.message : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    ...(isDevelopment && { stack: error.stack })
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectDatabase();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    const server = app.listen(PORT, () => {
      logger.info(`üöÄ Fit-Check Backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      logger.info(`üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${PORT}/api/docs`);
      logger.info(`üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:${PORT}/health`);
      logger.info(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${process.env.NODE_ENV || 'development'}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
    const gracefulShutdown = async (signal: string) => {
      logger.info(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ù–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...`);
      
      server.close(() => {
        logger.info('HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      });

      await disconnectDatabase();
      process.exit(0);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
      process.exit(1);
    });

    process.on('uncaughtException', (error) => {
      logger.error('Uncaught Exception thrown:', error);
      process.exit(1);
    });

  } catch (error) {
    logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();

export default app;