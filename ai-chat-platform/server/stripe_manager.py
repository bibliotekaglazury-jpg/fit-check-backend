import stripe
import os
from flask import request, jsonify
from typing import Dict, Optional
from .user_manager import UserManager

class StripeManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ Stripe"""
    
    def __init__(self, stripe_secret_key: str = None):
        stripe.api_key = stripe_secret_key or os.getenv('STRIPE_SECRET_KEY')
        self.webhook_secret = os.getenv('STRIPE_WEBHOOK_SECRET')
        self.user_manager = UserManager()
        
        # ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ Stripe (–Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ Stripe Dashboard)
        self.stripe_prices = {
            'pro_monthly': os.getenv('STRIPE_PRICE_PRO_MONTHLY'),  # price_xxx
            'pro_yearly': os.getenv('STRIPE_PRICE_PRO_YEARLY')     # price_xxx
        }

    async def create_checkout_session(self, firebase_uid: str, plan: str, success_url: str, cancel_url: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ Stripe Checkout —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            if plan not in self.stripe_prices:
                return {'success': False, 'error': 'Invalid plan'}
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_doc = self.user_manager.db.collection('users').document(firebase_uid).get()
            if not user_doc.exists:
                return {'success': False, 'error': 'User not found'}
            
            user_data = user_doc.to_dict()
            email = user_data['email']
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º Stripe customer
            customers = stripe.Customer.list(email=email, limit=1)
            if customers.data:
                customer = customers.data[0]
            else:
                customer = stripe.Customer.create(
                    email=email,
                    metadata={
                        'firebase_uid': firebase_uid,
                        'display_name': user_data.get('display_name', '')
                    }
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º customer_id –≤ Firebase
            self.user_manager.db.collection('users').document(firebase_uid).update({
                'subscription.stripe_customer_id': customer.id
            })
            
            # –°–æ–∑–¥–∞–µ–º checkout —Å–µ—Å—Å–∏—é
            session = stripe.checkout.Session.create(
                customer=customer.id,
                payment_method_types=['card'],
                line_items=[{
                    'price': self.stripe_prices[plan],
                    'quantity': 1,
                }],
                mode='subscription',
                success_url=success_url + '?session_id={CHECKOUT_SESSION_ID}',
                cancel_url=cancel_url,
                metadata={
                    'firebase_uid': firebase_uid,
                    'plan': plan
                },
                subscription_data={
                    'metadata': {
                        'firebase_uid': firebase_uid,
                        'plan': plan
                    }
                }
            )
            
            return {
                'success': True,
                'checkout_url': session.url,
                'session_id': session.id
            }
            
        except Exception as e:
            return {'success': False, 'error': str(e)}

    async def handle_webhook(self, payload: str, sig_header: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Stripe webhooks –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            event = stripe.Webhook.construct_event(
                payload, sig_header, self.webhook_secret
            )
            
            if event['type'] == 'checkout.session.completed':
                session = event['data']['object']
                await self._handle_successful_payment(session)
                
            elif event['type'] == 'invoice.payment_succeeded':
                invoice = event['data']['object']
                await self._handle_subscription_renewal(invoice)
                
            elif event['type'] == 'customer.subscription.deleted':
                subscription = event['data']['object']
                await self._handle_subscription_cancellation(subscription)
            
            return {'success': True}
            
        except ValueError as e:
            return {'success': False, 'error': f'Invalid payload: {e}'}
        except stripe.error.SignatureVerificationError as e:
            return {'success': False, 'error': f'Invalid signature: {e}'}
        except Exception as e:
            return {'success': False, 'error': str(e)}

    async def _handle_successful_payment(self, session):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        firebase_uid = session['metadata']['firebase_uid']
        plan = session['metadata']['plan']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É Stripe
        subscription_id = session['subscription']
        subscription = stripe.Subscription.retrieve(subscription_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firebase
        await self.user_manager.upgrade_subscription(
            firebase_uid=firebase_uid,
            new_plan=plan,
            stripe_data={
                'customer_id': session['customer'],
                'subscription_id': subscription_id
            }
        )
        
        print(f"‚úÖ Subscription activated for user {firebase_uid}, plan: {plan}")

    async def _handle_subscription_renewal(self, invoice):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        customer_id = invoice['customer']
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ customer_id
        users = self.user_manager.db.collection('users').where(
            'subscription.stripe_customer_id', '==', customer_id
        ).limit(1).get()
        
        if users:
            user_doc = users[0]
            firebase_uid = user_doc.id
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            subscription = stripe.Subscription.retrieve(invoice['subscription'])
            plan = subscription['metadata'].get('plan', 'pro_monthly')
            
            from datetime import datetime, timedelta
            if plan.endswith('yearly'):
                new_expires_at = datetime.now() + timedelta(days=365)
            else:
                new_expires_at = datetime.now() + timedelta(days=30)
            
            self.user_manager.db.collection('users').document(firebase_uid).update({
                'subscription.expires_at': new_expires_at,
                'subscription.status': 'active'
            })
            
            print(f"‚úÖ Subscription renewed for user {firebase_uid}")

    async def _handle_subscription_cancellation(self, subscription):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
        customer_id = subscription['customer']
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = self.user_manager.db.collection('users').where(
            'subscription.stripe_customer_id', '==', customer_id
        ).limit(1).get()
        
        if users:
            user_doc = users[0]
            firebase_uid = user_doc.id
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ free –ø–ª–∞–Ω
            await self.user_manager.upgrade_subscription(
                firebase_uid=firebase_uid,
                new_plan='free'
            )
            
            self.user_manager.db.collection('users').document(firebase_uid).update({
                'subscription.status': 'cancelled'
            })
            
            print(f"‚ùå Subscription cancelled for user {firebase_uid}")

    async def get_customer_portal_url(self, firebase_uid: str, return_url: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        try:
            user_doc = self.user_manager.db.collection('users').document(firebase_uid).get()
            if not user_doc.exists:
                return {'success': False, 'error': 'User not found'}
            
            user_data = user_doc.to_dict()
            customer_id = user_data['subscription'].get('stripe_customer_id')
            
            if not customer_id:
                return {'success': False, 'error': 'No Stripe customer found'}
            
            session = stripe.billing_portal.Session.create(
                customer=customer_id,
                return_url=return_url,
            )
            
            return {
                'success': True,
                'portal_url': session.url
            }
            
        except Exception as e:
            return {'success': False, 'error': str(e)}

    def get_pricing_info(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ"""
        return {
            'plans': [
                {
                    'id': 'free',
                    'name': 'üÜì Free Plan',
                    'price': 0,
                    'period': '',
                    'features': [
                        '50 —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
                        '10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å',
                        '–î–æ—Å—Ç—É–ø –∫ GPT-3.5',
                        '–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å'
                    ],
                    'button_text': '–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω',
                    'popular': False
                },
                {
                    'id': 'pro_monthly',
                    'name': 'üöÄ Pro Monthly',
                    'price': 19.99,
                    'period': '/–º–µ—Å—è—Ü',
                    'features': [
                        '1000 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å',
                        '–í—Å–µ AI –º–æ–¥–µ–ª–∏ (GPT-4, Claude, Gemini)',
                        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                        '–≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤',
                        '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥'
                    ],
                    'button_text': '–í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω',
                    'popular': True
                },
                {
                    'id': 'pro_yearly',
                    'name': 'üíé Pro Yearly',
                    'price': 199.99,
                    'period': '/–≥–æ–¥',
                    'original_price': 239.88,
                    'save_text': '–≠–∫–æ–Ω–æ–º–∏—è $40',
                    'features': [
                        '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
                        '–í—Å–µ AI –º–æ–¥–µ–ª–∏',
                        'API –¥–æ—Å—Ç—É–ø',
                        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                        '–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
                    ],
                    'button_text': '–õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                    'popular': False
                }
            ]
        }