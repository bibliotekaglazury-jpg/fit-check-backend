from json import dumps, loads
from time import time
from flask import request, jsonify
from hashlib import sha256
from datetime import datetime
from requests import get
from requests import post 
import json
import os
import asyncio
import concurrent.futures
from threading import Thread
import time

from server.config import special_instructions
from server.web_scraper import WebScraper, detect_urls_in_text, ReviewSearcher, CarAnalyzer

# –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º
DEMO_MODE = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ–º–æ —Ä–µ–∂–∏–º
AIProviderManager = None
UserManager = None
StripeManager = None

print("üí¨ –ó–∞–ø—É—Å–∫ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ (–±–∞–∑–æ–≤—ã–π OpenAI API)")


class Backend_Api:
    def __init__(self, app, config: dict) -> None:
        self.app = app
        self.config = config
        self.demo_mode = DEMO_MODE
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –≤—Å–µ None)
        self.ai_manager = None
        self.user_manager = None
        self.stripe_manager = None
            
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞
        self.openai_key = os.getenv("OPENAI_API_KEY") or config.get('openai_key')
        self.openai_api_base = os.getenv("OPENAI_API_BASE") or config.get('openai_api_base', 'https://api.openai.com/v1')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–±-—Å–∫—Ä–∞–ø–µ—Ä –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        self.web_scraper = WebScraper()
        self.review_searcher = ReviewSearcher()
        self.car_analyzer = CarAnalyzer()
        
        # –ö–µ—à –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - Redis –∏–ª–∏ –ë–î)
        self.web_cache = {}
        self.cache_ttl = 3600  # 1 —á–∞—Å
        
        self.routes = {
            # –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç API
            '/backend-api/v2/conversation': {
                'function': self._conversation,
                'methods': ['POST']
            },
            # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            '/api/models': {
                'function': self._get_models,
                'methods': ['GET']
            },
            # API –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            '/api/auth/register': {
                'function': self._register_user,
                'methods': ['POST']
            },
            '/api/user/dashboard': {
                'function': self._get_user_dashboard,
                'methods': ['GET']
            },
            # API –ø–æ–¥–ø–∏—Å–æ–∫
            '/api/subscription/create-checkout': {
                'function': self._create_checkout_session,
                'methods': ['POST']
            },
            '/api/subscription/portal': {
                'function': self._get_customer_portal,
                'methods': ['POST']
            },
            '/api/pricing': {
                'function': self._get_pricing,
                'methods': ['GET']
            },
            # Webhook –¥–ª—è Stripe
            '/webhook/stripe': {
                'function': self._stripe_webhook,
                'methods': ['POST']
            }
        }
    
    def _scrape_url_cached(self, url: str) -> dict:
        """–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        current_time = time.time()
        cache_key = f"scrape_{url}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if cache_key in self.web_cache:
            cached_data, cache_time = self.web_cache[cache_key]
            if current_time - cache_time < self.cache_ttl:
                print(f"‚ö° –ö–µ—à –¥–ª—è {url}")
                return cached_data
        
        # –°–∫—Ä–∞–ø–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        print(f"üåç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {url}")
        scraped_data = self.web_scraper.scrape_url(url)
        self.web_cache[cache_key] = (scraped_data, current_time)
        
        return scraped_data
    
    def _process_urls_parallel(self, urls: list) -> list:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤ 3-5 —Ä–∞–∑"""
        print(f"üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(urls)} URL...")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø—Ä–∏–ª–∏—á–∏—è
        max_workers = min(len(urls), 3)
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö URL –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            future_to_url = {executor.submit(self._scrape_url_cached, url): url for url in urls}
            
            results = []
            for future in concurrent.futures.as_completed(future_to_url):
                url = future_to_url[future]
                try:
                    result = future.result(timeout=15)  # –ú–∞–∫—Å 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ URL
                    results.append((url, result))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–ª—è {url}: {e}")
                    results.append((url, {'success': False, 'error': str(e)}))
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} URL")
        return results

    def _conversation(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π API –¥–ª—è —á–∞—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ª–∏–º–∏—Ç–æ–≤"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            request_data = request.json  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            model = request_data.get('model', 'gpt-3.5-turbo')
            jailbreak = request_data.get('jailbreak', 'default')
            internet_access = request_data['meta']['content']['internet_access']
            _conversation = request_data['meta']['content']['conversation']
            prompt = request_data['meta']['content']['parts'][0]
            files = request_data['meta']['content'].get('files', [])  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞—Ä–∞–Ω–µ–µ
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–±–∏—Ä–∞–µ–º –¥–ª—è –¥–µ–º–æ)
            auth_header = request.headers.get('Authorization')
            # if not auth_header:
            #     return {'success': False, 'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}, 401
            
            try:
                firebase_token = auth_header.split('Bearer ')[1]
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ Firebase token
                firebase_uid = 'demo_user'  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                token_check = asyncio.run(
                    self.user_manager.check_user_tokens(firebase_uid, model)
                )
                
                if not token_check.get('allowed', False):
                    return {
                        'success': False, 
                        'error': token_check.get('reason', '–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω'),
                        'upgrade_needed': token_check.get('upgrade_needed', False)
                    }, 429
                    
            except Exception as auth_error:
                # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                firebase_uid = 'demo_user'
                print(f"Auth error (demo mode): {auth_error}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            current_date = datetime.now().strftime("%Y-%m-%d")
            system_message = f'''–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º. –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}

–û–§–û–†–ú–õ–ï–ù–ò–ï:
- –Ø—Ä–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —ç–º–æ–¥–∂–∏ (üöó, ‚≠ê, üìà)
- –û—Ü–µ–Ω–∫–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏: ‚≠ê‚≠ê‚≠ê‚≠ê‚òÜ (4.0/5.0)
- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã: ‚ñ†‚ñ†‚ñ†‚ñ†‚ñ° 80%
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ü—Ä–∏–º–µ—Ä: ## ‚≠ê –û–¶–ï–ù–ö–ê: 4.2/5.0
–û—Ñ–æ—Ä–º–ª—è–π –∫—Ä–∞—Å–∏–≤–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ!'''
            
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = prompt.get('content', '')
            urls_in_message = detect_urls_in_text(user_message)
            
            web_content = []
            if urls_in_message:
                print(f"üåç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã URL: {urls_in_message}")
                
                # üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê - –£–°–ö–û–†–ï–ù–ò–ï –í 3-5 –†–ê–ó!
                processed_urls = self._process_urls_parallel(urls_in_message[:3])
                
                for url, scraped_data in processed_urls:
                    if scraped_data['success']:
                            content_summary = f"\n\n=== üåê –û–Ω–ª–∞–π–Ω —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å {scraped_data['domain']} ===\n"
                            content_summary += f"üìú –ó–∞–≥–æ–ª–æ–≤–æ–∫: {scraped_data['title']}\n"
                            content_summary += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {scraped_data['description']}\n"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∞–Ω–∞–ª–∏–∑
                            if scraped_data['structured_data']:
                                structured = scraped_data['structured_data']
                                if structured.get('type') == 'car_listing':
                                    content_summary += f"\nüöó –û–ë–™–Ø–í–õ–ï–ù–ò–ï –û –ü–†–û–î–ê–ñ–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø:\n"
                                    
                                    if structured.get('price'):
                                        content_summary += f"üí∞ –¶–µ–Ω–∞: {structured['price']}\n"
                                    
                                    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                                    content_summary += "\nüîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:\n"
                                    for key, value in structured.get('car_details', {}).items():
                                        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                                        icon = "üìÖ" if "–≥–æ–¥" in key.lower() or "rok" in key.lower() else \
                                               "üõ£Ô∏è" if "–ø—Ä–æ–±–µ–≥" in key.lower() or "przebieg" in key.lower() else \
                                               "‚õΩ" if "–ø–∞–ª–∏–≤" in key.lower() or "paliwa" in key.lower() else \
                                               "‚öôÔ∏è" if "–¥–≤–∏–≥" in key.lower() or "pojemno" in key.lower() else \
                                               "üîã" if "–º–æ—â" in key.lower() or "moc" in key.lower() else \
                                               "üöò" if "–∫—É–∑–æ–≤" in key.lower() or "nadwozi" in key.lower() else "üîπ"
                                        content_summary += f"{icon} {key}: {value}\n"
                                    
                                    # –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                                    try:
                                        analysis = self.car_analyzer.analyze_car_from_listing(scraped_data)
                                        if analysis:
                                            # –ö—Ä–∞—Å–∏–≤–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                                            content_summary += "\n‚îå" + "‚îÄ" * 50 + "‚îê\n"
                                            content_summary += "‚îÇ" + " " * 8 + "üèÜ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó" + " " * 7 + "‚îÇ\n"
                                            content_summary += "‚îú" + "‚îÄ" * 50 + "‚î§\n"
                                            
                                            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å –±–æ–ª—å—à–∏–º–∏ –∑–≤–µ–∑–¥–∞–º–∏
                                            stars_full = "‚≠ê" * int(analysis['overall_score'])
                                            stars_empty = "‚òÜ" * (5 - int(analysis['overall_score']))
                                            content_summary += f"‚îÇ üéÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê: {stars_full}{stars_empty} {analysis['overall_score']}/5.0" + " " * (13 - len(str(analysis['overall_score']))) + "‚îÇ\n"
                                            
                                            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤ –∫—Ä–∞—Å–∏–≤–æ–π —Ä–∞–º–∫–µ
                                            recommendation = analysis['recommendation']
                                            if len(recommendation) > 40:
                                                recommendation = recommendation[:37] + "..."
                                            content_summary += f"‚îÇ üìù {recommendation}" + " " * (48 - len(recommendation)) + "‚îÇ\n"
                                            content_summary += "‚îî" + "‚îÄ" * 50 + "‚îò\n"
                                            
                                            # –û—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
                                            content_summary += "\nüìâ –î–ï–¢–ê–õ–¨–ù–´–ï –û–¶–ï–ù–ö–ò:\n"
                                            for category, data in analysis['category_scores'].items():
                                                # –°–∏—Å—Ç–µ–º–∞ –∑–≤–µ–∑–¥ + –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                                                stars = "‚≠ê" * int(data['score']) + "‚òÜ" * (5 - int(data['score']))
                                                progress_bars = "‚ñà" * int(data['score']) + "‚ñë" * (5 - int(data['score']))
                                                
                                                # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                                                icon = "‚öôÔ∏è" if category == 'reliability' else \
                                                       "üõãÔ∏è" if category == 'comfort' else \
                                                       "üèéÔ∏è" if category == 'performance' else \
                                                       "üí∞" if category == 'economy' else \
                                                       "üõ°Ô∏è" if category == 'safety' else \
                                                       "üé®" if category == 'design' else "üîπ"
                                                
                                                content_summary += f"{icon} **{data['description']}**: {stars} [{progress_bars}] {data['score']}/5.0\n"
                                    
                                    except Exception as analysis_error:
                                        print(f"Analysis error: {analysis_error}")
                                    
                                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
                                    if structured.get('images'):
                                        # –ö—Ä–∞—Å–∏–≤–∞—è —Ä–∞–º–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥–∞–ª–µ—Ä–µ–∏
                                        content_summary += "\n\n‚îå" + "‚îÄ" * 52 + "‚îê\n"
                                        content_summary += f"‚îÇ" + " " * 8 + f"üì∑ –§–û–¢–û–ì–ê–õ–ï–†–ï–Ø ({len(structured['images'])} —Ñ–æ—Ç–æ)" + " " * (44 - len(str(len(structured['images'])))) + "‚îÇ\n"
                                        content_summary += "‚îú" + "‚îÄ" * 52 + "‚î§\n"
                                        
                                        for i, img in enumerate(structured['images'][:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 —Ñ–æ—Ç–æ
                                            # –û–±—Ä–µ–∑–∞–µ–º URL –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                                            url_display = img['url']
                                            if len(url_display) > 42:
                                                url_display = url_display[:39] + "..."
                                            
                                            title_display = img['title']
                                            if len(title_display) > 20:
                                                title_display = title_display[:17] + "..."
                                                
                                            content_summary += f"‚îÇ üéÜ [{i}] {title_display}" + " " * (48 - len(title_display)) + "‚îÇ\n"
                                            content_summary += f"‚îÇ    üîó {url_display}" + " " * (48 - len(url_display)) + "‚îÇ\n"
                                            if i < len(structured['images'][:3]):
                                                content_summary += "‚îÇ" + "-" * 52 + "‚îÇ\n"
                                        
                                        content_summary += "‚îî" + "‚îÄ" * 52 + "‚îò\n"
                                    
                                    if structured.get('description'):
                                        content_summary += f"\nüí¨ –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–î–ê–í–¶–ê:\n{structured['description'][:500]}...\n"
                                
                                elif structured.get('type') == 'youtube_video':
                                    content_summary += f"\nüé• YouTube –í–ò–î–ï–û:\n"
                                    content_summary += f"üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ: {structured.get('video_title', '')}\n"
                                    content_summary += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {structured.get('description', '')[:300]}...\n"
                            
                            # –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
                            if scraped_data.get('structured_data', {}).get('type') == 'car_listing':
                                try:
                                    car_details = scraped_data['structured_data'].get('car_details', {})
                                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å
                                    title_parts = scraped_data['title'].lower().split()
                                    car_make = ''
                                    car_model = ''
                                    
                                    if 'mercedes' in scraped_data['title'].lower():
                                        car_make = 'Mercedes-Benz'
                                        if 'gle' in scraped_data['title'].lower():
                                            car_model = 'GLE'
                                    elif 'bmw' in scraped_data['title'].lower():
                                        car_make = 'BMW'
                                        if 'seria 3' in scraped_data['title'].lower() or '3 series' in scraped_data['title'].lower():
                                            car_model = 'Seria 3'
                                    
                                    if car_make and car_model:
                                        reviews = self.review_searcher.search_reviews_for_car(car_make, car_model)
                                        if reviews:
                                            # –ö—Ä–∞—Å–∏–≤–∞—è —Ä–∞–º–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
                                            content_summary += "\n\n‚îå" + "‚îÄ" * 55 + "‚îê\n"
                                            content_summary += "‚îÇ" + " " * 15 + "üìù –û–¢–ó–´–í–´ –í–õ–ê–î–ï–õ–¨–¶–ï–í" + " " * 15 + "‚îÇ\n"
                                            content_summary += "‚îú" + "‚îÄ" * 55 + "‚î§\n"
                                            content_summary += f"‚îÇ üìà –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {reviews['summary']['total_found']}" + " " * (35 - len(str(reviews['summary']['total_found']))) + "‚îÇ\n"
                                            content_summary += "‚îî" + "‚îÄ" * 55 + "‚îò\n"
                                            
                                            # –û—Ç–∑—ã–≤—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏
                                            for idx, review in enumerate(reviews['found_reviews'][:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 2 –æ—Ç–∑—ã–≤–∞
                                                rating_stars = "‚≠ê" * int(review['rating']) + "‚òÜ" * (5 - int(review['rating']))
                                                content_summary += f"\n‚îå‚îÄ‚îÄ –û—Ç–∑—ã–≤ #{idx} " + "‚îÄ" * 20 + "‚îê\n"
                                                content_summary += f"‚îÇ üì¶ –ò—Å—Ç–æ—á–Ω–∏–∫: {review['source']}" + " " * (28 - len(review['source'])) + "‚îÇ\n"
                                                
                                                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                                                title = review['title']
                                                if len(title) > 30:
                                                    title = title[:27] + "..."
                                                content_summary += f"‚îÇ üìù {title}" + " " * (31 - len(title)) + "‚îÇ\n"
                                                content_summary += f"‚îÇ {rating_stars} ({review['rating']}/5.0) - {review['author']}" + " " * (30 - len(review['author']) - len(str(review['rating']))) + "‚îÇ\n"
                                                content_summary += "‚îú" + "‚îÄ" * 32 + "‚î§\n"
                                                
                                                for point in review['key_points'][:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 2 –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç–∞
                                                    if len(point) > 30:
                                                        point = point[:27] + "..."
                                                    content_summary += f"‚îÇ ‚Ä¢ {point}" + " " * (30 - len(point)) + "‚îÇ\n"
                                                content_summary += "‚îî" + "‚îÄ" * 32 + "‚îò\n"
                                            
                                            # –û–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–ª—é—Å—ã –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –±–ª–æ–∫–∞—Ö
                                            if reviews['common_issues']:
                                                content_summary += "\n‚îå" + "‚îÄ" * 40 + "‚îê\n"
                                                content_summary += "‚îÇ" + " " * 8 + "‚ö†Ô∏è –ß–ê–°–¢–´–ï –ü–†–û–ë–õ–ï–ú–´" + " " * 8 + "‚îÇ\n"
                                                content_summary += "‚îú" + "‚îÄ" * 40 + "‚î§\n"
                                                for issue in reviews['common_issues'][:3]:
                                                    if len(issue) > 36:
                                                        issue = issue[:33] + "..."
                                                    content_summary += f"‚îÇ ‚Ä¢ {issue}" + " " * (38 - len(issue)) + "‚îÇ\n"
                                                content_summary += "‚îî" + "‚îÄ" * 40 + "‚îò\n"
                                            
                                            if reviews['positive_feedback']:
                                                content_summary += "\n‚îå" + "‚îÄ" * 40 + "‚îê\n"
                                                content_summary += "‚îÇ" + " " * 6 + "‚úÖ –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï –û–¢–ó–´–í–´" + " " * 6 + "‚îÇ\n"
                                                content_summary += "‚îú" + "‚îÄ" * 40 + "‚î§\n"
                                                for positive in reviews['positive_feedback'][:3]:
                                                    if len(positive) > 36:
                                                        positive = positive[:33] + "..."
                                                    content_summary += f"‚îÇ ‚Ä¢ {positive}" + " " * (38 - len(positive)) + "‚îÇ\n"
                                                content_summary += "‚îî" + "‚îÄ" * 40 + "‚îò\n"
                                
                                except Exception as review_error:
                                    print(f"Review search error: {review_error}")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∞–≤—Ç–æ —Å–∞–π—Ç–æ–≤
                            if not scraped_data.get('structured_data', {}).get('type') == 'car_listing' and scraped_data['content']:
                                content_summary += f"\nüìÑ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç: {scraped_data['content'][:1000]}...\n"
                            
                            content_summary += f"\n=== –ö–æ–Ω–µ—Ü –∞–Ω–∞–ª–∏–∑–∞ {url} ===\n\n"
                            web_content.append(content_summary)
                    else:
                        web_content.append(f"\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {url}: {scraped_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n\n")
            
            extra = []
            if internet_access:
                try:
                    search = get('https://ddg-api.herokuapp.com/search', params={
                        'query': prompt["content"],
                        'limit': 3,
                    }, timeout=10)
                    
                    if search.status_code == 200:
                        blob = ''
                        for index, result in enumerate(search.json()):
                            blob += f'[{index}] "{result.get("snippet", "")}"\nURL:{result.get("link", "")}\n\n'
                        
                        date = datetime.now().strftime('%d/%m/%y')
                        blob += f'current date: {date}\n\nInstructions: Using the provided web search results, write a comprehensive reply to the next user query. Make sure to cite results using [[number](URL)] notation after the reference.'
                        extra = [{'role': 'user', 'content': blob}]
                        
                except Exception as search_error:
                    print(f"Search error: {search_error}")
            
            # ‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï - –ò–°–ü–û–õ–¨–ó–£–ï–ú –£–ñ–ï –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï!
            if len(urls_in_message) >= 2 and urls_in_message:
                car_listings = []
                scraped_cars = []
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
                for url, scraped_data in processed_urls if 'processed_urls' in locals() else []:
                    if scraped_data.get('success') and scraped_data.get('structured_data', {}).get('type') == 'car_listing':
                        car_listings.append(scraped_data)
                        scraped_cars.append(url)
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–æ—Å—å 2 –∏–ª–∏ –±–æ–ª—å—à–µ –∞–≤—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                if len(car_listings) >= 2:
                    try:
                        print("üèÜ –°—Ä–∞–≤–Ω–∏–≤–∞—é –∞–≤—Ç–æ–º–æ–±–∏–ª–∏...")
                        
                        # –¢–ê–ë–õ–ò–¶–ê –°–†–ê–í–ù–ï–ù–ò–Ø –ë–û–ö –û –ë–û–ö —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
                        comparison_summary = "\n\n<div class='car-comparison-table'>\n"
                        comparison_summary += "<h2>üèÜ –°–†–ê–í–ù–ï–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô</h2>\n"
                        comparison_summary += "<table border='1' style='width:100%; border-collapse:collapse; margin:20px 0;'>\n"
                        
                        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
                        car1_data = car_listings[0].get('structured_data', {})
                        car2_data = car_listings[1].get('structured_data', {})
                        
                        car1_title = car_listings[0].get('title', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å 1')
                        car2_title = car_listings[1].get('title', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å 2')
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                        car1_images = car1_data.get('images', [])
                        car2_images = car2_data.get('images', [])
                        
                        car1_main_photo = car1_images[0]['url'] if car1_images else '/assets/img/no-car.png'
                        car2_main_photo = car2_images[0]['url'] if car2_images else '/assets/img/no-car.png'
                        
                        comparison_summary += "<tr style='background:#f0f8ff;'>\n"
                        comparison_summary += f"<th style='padding:15px; width:20%;'>–ü–∞—Ä–∞–º–µ—Ç—Ä</th>\n"
                        comparison_summary += f"<th style='padding:15px; width:40%;'><img src='{car1_main_photo}' style='width:200px;height:150px;object-fit:cover;border-radius:8px;'><br><b>{car1_title[:50]}...</b></th>\n"
                        comparison_summary += f"<th style='padding:15px; width:40%;'><img src='{car2_main_photo}' style='width:200px;height:150px;object-fit:cover;border-radius:8px;'><br><b>{car2_title[:50]}...</b></th>\n"
                        comparison_summary += "</tr>\n"
                        
                        # –°—Ç—Ä–æ–∫–∞ —Å –æ–±—â–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
                        comparison_summary += "<tr style='background:#fff3cd;'>\n"
                        comparison_summary += f"<td style='padding:12px; font-weight:bold;'>üèÜ –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥</td>\n"
                        
                        # –û–±—â–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å –∑–≤–µ–∑–¥–∞–º–∏
                        car1_score = self._get_car_rating(car1_title)
                        car2_score = self._get_car_rating(car2_title)
                        
                        car1_stars = "‚≠ê" * int(car1_score) + "‚òÜ" * (5 - int(car1_score))
                        car2_stars = "‚≠ê" * int(car2_score) + "‚òÜ" * (5 - int(car2_score))
                        
                        car1_cell_style = "background:#d4edda; font-weight:bold;" if car1_score > car2_score else "background:#f8f9fa;"
                        car2_cell_style = "background:#d4edda; font-weight:bold;" if car2_score > car1_score else "background:#f8f9fa;"
                        
                        comparison_summary += f"<td style='padding:12px; {car1_cell_style}'>{car1_stars} {car1_score:.1f}/5.0</td>\n"
                        comparison_summary += f"<td style='padding:12px; {car2_cell_style}'>{car2_stars} {car2_score:.1f}/5.0</td>\n"
                        comparison_summary += "</tr>\n"
                        
                        # –¶–µ–Ω–∞
                        car1_price = car1_data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                        car2_price = car2_data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                        
                        comparison_summary += "<tr>\n"
                        comparison_summary += f"<td style='padding:12px; font-weight:bold;'>üí∞ –¶–µ–Ω–∞</td>\n"
                        comparison_summary += f"<td style='padding:12px;'>{car1_price}</td>\n"
                        comparison_summary += f"<td style='padding:12px;'>{car2_price}</td>\n"
                        comparison_summary += "</tr>\n"
                        
                        # –ü—Ä–æ–±–µ–≥
                        car1_mileage = self._extract_mileage(car_listings[0])
                        car2_mileage = self._extract_mileage(car_listings[1])
                        
                        comparison_summary += "<tr>\n"
                        comparison_summary += f"<td style='padding:12px; font-weight:bold;'>üö∑ –ü—Ä–æ–±–µ–≥</td>\n"
                        comparison_summary += f"<td style='padding:12px;'>{car1_mileage}</td>\n"
                        comparison_summary += f"<td style='padding:12px;'>{car2_mileage}</td>\n"
                        comparison_summary += "</tr>\n"
                        
                        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        categories = [
                            ('‚öôÔ∏è –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å', 'reliability'),
                            ('üõãÔ∏è –ö–æ–º—Ñ–æ—Ä—Ç', 'comfort'),
                            ('üèéÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'performance'),
                            ('üí∞ –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å', 'economy'),
                            ('üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'safety'),
                            ('üé® –î–∏–∑–∞–π–Ω', 'design')
                        ]
                        
                        for category_name, category_key in categories:
                            # –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã HTML
                            car1_score = self._get_category_rating(car1_title, category_key)
                            car2_score = self._get_category_rating(car2_title, category_key)
                            
                            car1_progress = f"<div style='background:#e0e0e0; border-radius:5px; height:20px; width:100%;'><div style='background:#28a745; height:100%; width:{car1_score*20}%; border-radius:5px; display:flex; align-items:center; justify-content:center; color:white; font-size:12px;'>{car1_score:.1f}</div></div>"
                            car2_progress = f"<div style='background:#e0e0e0; border-radius:5px; height:20px; width:100%;'><div style='background:#dc3545; height:100%; width:{car2_score*20}%; border-radius:5px; display:flex; align-items:center; justify-content:center; color:white; font-size:12px;'>{car2_score:.1f}</div></div>"
                            
                            winner_style1 = "background:#d4edda; font-weight:bold;" if car1_score > car2_score else "background:#f8f9fa;"
                            winner_style2 = "background:#d4edda; font-weight:bold;" if car2_score > car1_score else "background:#f8f9fa;"
                            
                            comparison_summary += "<tr>\n"
                            comparison_summary += f"<td style='padding:12px; font-weight:bold;'>{category_name}</td>\n"
                            comparison_summary += f"<td style='padding:12px; {winner_style1}'>{car1_progress}</td>\n"
                            comparison_summary += f"<td style='padding:12px; {winner_style2}'>{car2_progress}</td>\n"
                            comparison_summary += "</tr>\n"
                        
                        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                        tech_params = [
                            ('üìÖ –ì–æ–¥', 'year'),
                            ('‚õΩ –¢–æ–ø–ª–∏–≤–æ', 'fuel'),
                            ('‚öôÔ∏è –û–±—ä–µ–º', 'engine'),
                            ('üîã –ú–æ—â–Ω–æ—Å—Ç—å', 'power')
                        ]
                        
                        for param_name, param_key in tech_params:
                            car1_value = self._extract_tech_param(car_listings[0], param_key)
                            car2_value = self._extract_tech_param(car_listings[1], param_key)
                            
                            comparison_summary += "<tr>\n"
                            comparison_summary += f"<td style='padding:12px; font-weight:bold;'>{param_name}</td>\n"
                            comparison_summary += f"<td style='padding:12px;'>{car1_value}</td>\n"
                            comparison_summary += f"<td style='padding:12px;'>{car2_value}</td>\n"
                            comparison_summary += "</tr>\n"
                        
                        # –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ò –û–¢–ó–´–í–û–í
                        comparison_summary += "<tr style='background:#f8f9fa;'>\n"
                        comparison_summary += "<td colspan='3' style='padding:20px; text-align:center; font-weight:bold; font-size:18px;'>üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú</td>\n"
                        comparison_summary += "</tr>\n"
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                        car1_issues = self._get_detailed_car_issues(car1_title, car1_data.get('car_details', {}))
                        car2_issues = self._get_detailed_car_issues(car2_title, car2_data.get('car_details', {}))
                        
                        comparison_summary += "<tr>\n"
                        comparison_summary += "<td style='padding:15px; font-weight:bold; vertical-align:top;'>‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –ø–æ–ª–æ–º–∫–∏<br><small>(% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)</small></td>\n"
                        comparison_summary += f"<td style='padding:15px; vertical-align:top;'>{car1_issues['problems_html']}</td>\n"
                        comparison_summary += f"<td style='padding:15px; vertical-align:top;'>{car2_issues['problems_html']}</td>\n"
                        comparison_summary += "</tr>\n"
                        
                        comparison_summary += "<tr>\n"
                        comparison_summary += "<td style='padding:15px; font-weight:bold; vertical-align:top;'>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–ª–∞–¥–µ–Ω–∏—è<br><small>(–≤ –≥–æ–¥)</small></td>\n"
                        comparison_summary += f"<td style='padding:15px; vertical-align:top;'>{car1_issues['ownership_cost']}</td>\n"
                        comparison_summary += f"<td style='padding:15px; vertical-align:top;'>{car2_issues['ownership_cost']}</td>\n"
                        comparison_summary += "</tr>\n"
                        
                        comparison_summary += "<tr>\n"
                        comparison_summary += "<td style='padding:15px; font-weight:bold; vertical-align:top;'>üîß –¢–∏–ø–∏—á–Ω—ã–µ –ø–æ–ª–æ–º–∫–∏<br><small>–ø–æ –ø—Ä–æ–±–µ–≥—É</small></td>\n"
                        comparison_summary += f"<td style='padding:15px; vertical-align:top;'>{car1_issues['mileage_issues']}</td>\n"
                        comparison_summary += f"<td style='padding:15px; vertical-align:top;'>{car2_issues['mileage_issues']}</td>\n"
                        comparison_summary += "</tr>\n"
                        
                        comparison_summary += "<tr>\n"
                        comparison_summary += "<td style='padding:15px; font-weight:bold; vertical-align:top;'>üìù –û—Ç–∑—ã–≤—ã –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤<br><small>(—Ä–µ–∞–ª—å–Ω—ã–µ)</small></td>\n"
                        comparison_summary += f"<td style='padding:15px; vertical-align:top;'>{car1_issues['owner_reviews']}</td>\n"
                        comparison_summary += f"<td style='padding:15px; vertical-align:top;'>{car2_issues['owner_reviews']}</td>\n"
                        comparison_summary += "</tr>\n"
                        
                        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                        comparison_summary += "</table>\n"
                        
                        # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        comparison_summary += "<div style='margin:20px 0; padding:20px; background:#f8f9fa; border-radius:10px;'>\n"
                        comparison_summary += "<h3>üí° –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –≠–ö–°–ü–ï–†–¢–û–í</h3>\n"
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                        if car1_score > car2_score:
                            winner = f"{car1_title[:30]} - –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –ø–æ –æ–±—â–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É!"
                        elif car2_score > car1_score:
                            winner = f"{car2_title[:30]} - –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –ø–æ –æ–±—â–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É!"
                        else:
                            winner = "–û–±–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Ä–∞–≤–Ω–æ—Ü–µ–Ω–Ω—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º."
                        
                        comparison_summary += f"<p><strong>üèÜ –õ—É—á—à–∏–π –≤—ã–±–æ—Ä:</strong> {winner}</p>\n"
                        comparison_summary += "</div>\n"
                        comparison_summary += "</div>\n"
                        
                        web_content.append(comparison_summary)
                    
                    except Exception as comparison_error:
                        print(f"Car comparison error: {comparison_error}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–±-–∫–æ–Ω—Ç–µ–Ω—Ç –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            if web_content:
                web_blob = ''.join(web_content)
                web_blob += "\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –°—Å—ã–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ. –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ."
                extra.append({'role': 'user', 'content': web_blob})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
            conversation = [{'role': 'system', 'content': system_message}] + \
                extra + special_instructions.get(jailbreak, []) + \
                _conversation + [prompt]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            async def generate_response():
                if not self.demo_mode and self.ai_manager:
                    # –†–µ–∂–∏–º –º—É–ª—å—Ç–∏-–º–æ–¥–µ–ª—å–Ω–æ–≥–æ API
                    async for chunk in self.ai_manager.generate_response(
                        model_id=model,
                        messages=conversation,
                        stream=True
                    ):
                        yield chunk
                    
                    # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    try:
                        asyncio.create_task(
                            self.user_manager.consume_token(firebase_uid, model, 1)
                        )
                    except Exception as consume_error:
                        print(f"Token consume error: {consume_error}")
                else:
                    # –î–µ–º–æ —Ä–µ–∂–∏–º - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Gemini –∏ OpenAI
                    if model.startswith('gemini'):
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Gemini –º–æ–¥–µ–ª–∏
                        google_api_key = os.getenv('GOOGLE_API_KEY')
                        if not google_api_key:
                            yield "‚ö†Ô∏è –î–µ–º–æ —Ä–µ–∂–∏–º: —Ç—Ä–µ–±—É–µ—Ç—Å—è GOOGLE_API_KEY –≤ .env —Ñ–∞–π–ª–µ"
                            return
                            
                        try:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Gemini
                            contents = []
                            for msg in conversation:
                                if msg['role'] == 'system':
                                    continue  # Gemini –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç system —Ä–æ–ª–∏
                                role = 'user' if msg['role'] == 'user' else 'model'
                                
                                # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                parts = [{'text': msg['content']}]
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                try:
                                    if role == 'user' and files and msg == prompt:
                                        for file_data in files:
                                            if file_data.get('unsupported'):
                                                parts[0]['text'] += f"\n\n[Attached file: {file_data['name']} ({file_data['type']})]\n"
                                            elif 'data' in file_data:  # –õ—é–±—ã–µ —Ñ–∞–π–ª—ã —Å data - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã, etc
                                                parts.append({
                                                    'inlineData': {
                                                        'mimeType': file_data['mimeType'],
                                                        'data': file_data['data']
                                                    }
                                                })
                                            elif 'content' in file_data:  # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                                                parts[0]['text'] += f"\n\n--- File content: {file_data['name']} ---\n{file_data['content']}\n--- End of file ---\n"
                                except Exception as file_error:
                                    print(f"File processing error: {file_error}")
                                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ñ–∞–π–ª–æ–≤
                                
                                contents.append({
                                    'role': role,
                                    'parts': parts
                                })
                            
                            url = f"https://generativelanguage.googleapis.com/v1beta/models/{model}:generateContent"
                            payload = {'contents': contents}
                            
                            response = post(
                                url=url,
                                params={'key': google_api_key},
                                headers={'Content-Type': 'application/json'},
                                json=payload
                            )
                            
                            if response.status_code == 200:
                                result = response.json()
                                if 'candidates' in result and result['candidates']:
                                    content = result['candidates'][0]['content']['parts'][0]['text']
                                    yield content
                                else:
                                    yield "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini"
                            else:
                                yield f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini: {response.status_code} - {response.text}"
                                
                        except Exception as gemini_error:
                            yield f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini: {str(gemini_error)}"
                        return
                        
                    # OpenAI –º–æ–¥–µ–ª–∏
                    if not self.openai_key:
                        yield "‚ö†Ô∏è –î–µ–º–æ —Ä–µ–∂–∏–º: —Ç—Ä–µ–±—É–µ—Ç—Å—è OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª–µ"
                        return
                        
                    try:
                        url = f"{self.openai_api_base}/chat/completions"
                        
                        proxies = None
                        if 'proxy' in self.config and self.config['proxy'].get('enable'):
                            proxies = {
                                'http': self.config['proxy']['http'],
                                'https': self.config['proxy']['https'],
                            }
                        
                        response = post(
                            url     = url,
                            proxies = proxies,
                            headers = {
                                'Authorization': f'Bearer {self.openai_key}',
                                'Content-Type': 'application/json'
                            }, 
                            json    = {
                                'model'    : model, 
                                'messages' : conversation,
                                'stream'   : True
                            },
                            stream  = True
                        )
                        
                        if response.status_code >= 400:
                            yield f"‚ùóÔ∏è –û—à–∏–±–∫–∞ OpenAI API: {response.status_code} - {response.text}"
                            return
                            
                        for chunk in response.iter_lines():
                            try:
                                if chunk:
                                    line = chunk.decode('utf-8')
                                    if line.startswith('data: ') and line != 'data: [DONE]':
                                        data = line[6:]
                                        try:
                                            content = json.loads(data)['choices'][0]['delta'].get('content')
                                            if content:
                                                yield content
                                        except Exception as content_error:
                                            print(f"Content parsing error: {content_error}")
                            except Exception as chunk_error:
                                print(f"Chunk parsing error: {chunk_error}")
                                continue
                                
                    except Exception as api_error:
                        yield f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {str(api_error)}"
            
            def sync_stream():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    async_gen = generate_response()
                    while True:
                        try:
                            chunk = loop.run_until_complete(async_gen.__anext__())
                            yield chunk
                        except StopAsyncIteration:
                            break
                finally:
                    loop.close()
            
            return self.app.response_class(sync_stream(), mimetype='text/event-stream')
            
        except Exception as e:
            print(f"Conversation error: {e}")
            return {
                '_action': '_ask',
                'success': False,
                "error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            }, 400
    
    def _get_models(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            if self.demo_mode:
                # –î–µ–º–æ —Ä–µ–∂–∏–º - –≤—Å–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏
                models = [
                    # OpenAI Models
                    {
                        'id': 'gpt-4o',
                        'name': 'GPT-4o',
                        'provider': 'openai',
                        'description': '–ù–æ–≤–µ–π—à–∞—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å OpenAI',
                        'context': '128K',
                        'category': 'flagship'
                    },
                    {
                        'id': 'gpt-4o-mini',
                        'name': 'GPT-4o Mini',
                        'provider': 'openai',
                        'description': '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-4o –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–¥–∞—á',
                        'context': '128K',
                        'category': 'efficient'
                    },
                    {
                        'id': 'gpt-4-turbo',
                        'name': 'GPT-4 Turbo',
                        'provider': 'openai',
                        'description': '–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è GPT-4 —Å –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º',
                        'context': '128K',
                        'category': 'advanced'
                    },
                    {
                        'id': 'gpt-4',
                        'name': 'GPT-4',
                        'provider': 'openai',
                        'description': '–ú–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á',
                        'context': '8K',
                        'category': 'advanced'
                    },
                    {
                        'id': 'gpt-3.5-turbo',
                        'name': 'GPT-3.5 Turbo',
                        'provider': 'openai',
                        'description': '–ë—ã—Å—Ç—Ä–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å',
                        'context': '16K',
                        'category': 'efficient'
                    },
                    
                    # Anthropic Claude
                    {
                        'id': 'claude-3-5-sonnet-20241022',
                        'name': 'Claude 3.5 Sonnet',
                        'provider': 'anthropic',
                        'description': '–ù–æ–≤–µ–π—à–∞—è –∏ —Å–∞–º–∞—è —É–º–Ω–∞—è –º–æ–¥–µ–ª—å Claude',
                        'context': '200K',
                        'category': 'flagship'
                    },
                    {
                        'id': 'claude-3-5-haiku-20241022',
                        'name': 'Claude 3.5 Haiku',
                        'provider': 'anthropic',
                        'description': '–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å Claude —Å –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º',
                        'context': '200K',
                        'category': 'efficient'
                    },
                    {
                        'id': 'claude-3-opus-20240229',
                        'name': 'Claude 3 Opus',
                        'provider': 'anthropic',
                        'description': '–ù–∞–∏–±–æ–ª–µ–µ –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å Claude –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á',
                        'context': '200K',
                        'category': 'advanced'
                    },
                    
                    # Google Gemini
                    {
                        'id': 'gemini-1.5-pro',
                        'name': 'Gemini 1.5 Pro',
                        'provider': 'google',
                        'description': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å Google —Å –æ–≥—Ä–æ–º–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º',
                        'context': '2M',
                        'category': 'flagship'
                    },
                    {
                        'id': 'gemini-1.5-flash',
                        'name': 'Gemini 1.5 Flash',
                        'provider': 'google',
                        'description': '–ë—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è Gemini 1.5 Pro',
                        'context': '1M',
                        'category': 'efficient'
                    },
                    
                    # Meta Llama
                    {
                        'id': 'llama-3.1-70b',
                        'name': 'Llama 3.1 70B',
                        'provider': 'meta',
                        'description': '–ú–æ—â–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å Meta',
                        'context': '128K',
                        'category': 'advanced'
                    },
                    {
                        'id': 'llama-3.1-8b',
                        'name': 'Llama 3.1 8B',
                        'provider': 'meta',
                        'description': '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å Meta',
                        'context': '128K',
                        'category': 'efficient'
                    }
                ]
            else:
                models = self.ai_manager.get_all_models()
            
            return jsonify({
                'success': True,
                'models': models,
                'demo_mode': self.demo_mode
            })
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    def _register_user(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            data = request.get_json()
            firebase_uid = data.get('firebase_uid')
            email = data.get('email')
            display_name = data.get('display_name')
            
            if not firebase_uid or not email:
                return jsonify({
                    'success': False,
                    'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
                }), 400
            
            result = asyncio.run(
                self.user_manager.create_new_user(firebase_uid, email, display_name)
            )
            
            return jsonify(result)
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    def _get_user_dashboard(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º firebase_uid –∏–∑ —Ç–æ–∫–µ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            auth_header = request.headers.get('Authorization')
            if not auth_header:
                return jsonify({'success': False, 'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}), 401
            
            firebase_uid = 'demo_user'  # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            
            result = asyncio.run(
                self.user_manager.get_user_dashboard_data(firebase_uid)
            )
            
            return jsonify(result)
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    def _create_checkout_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Stripe checkout —Å–µ—Å—Å–∏–∏"""
        try:
            data = request.get_json()
            firebase_uid = data.get('firebase_uid')
            plan = data.get('plan')
            success_url = data.get('success_url')
            cancel_url = data.get('cancel_url')
            
            if not all([firebase_uid, plan, success_url, cancel_url]):
                return jsonify({
                    'success': False,
                    'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
                }), 400
            
            result = asyncio.run(
                self.stripe_manager.create_checkout_session(
                    firebase_uid, plan, success_url, cancel_url
                )
            )
            
            return jsonify(result)
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    def _get_customer_portal(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ä—Ç–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        try:
            data = request.get_json()
            firebase_uid = data.get('firebase_uid')
            return_url = data.get('return_url')
            
            result = asyncio.run(
                self.stripe_manager.get_customer_portal_url(firebase_uid, return_url)
            )
            
            return jsonify(result)
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    def _get_pricing(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö"""
        try:
            if self.demo_mode:
                # –î–µ–º–æ —Ä–µ–∂–∏–º - —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã
                pricing = {
                    'plans': [
                        {
                            'id': 'free',
                            'name': 'üÜì Free Plan (–¥–µ–º–æ)',
                            'price': 0,
                            'period': '',
                            'features': [
                                '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–µ–º–æ',
                                '–î–æ—Å—Ç—É–ø –∫ OpenAI GPT –º–æ–¥–µ–ª—è–º',
                                '–ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
                                '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞'
                            ],
                            'button_text': '–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω',
                            'popular': False
                        },
                        {
                            'id': 'pro_monthly',
                            'name': 'üöÄ Pro Monthly',
                            'price': 19.99,
                            'period': '/–º–µ—Å—è—Ü',
                            'features': [
                                '1000 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å',
                                '–í—Å–µ AI –º–æ–¥–µ–ª–∏ (GPT-4, Claude, Gemini)',
                                '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                                '–≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤',
                                '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥'
                            ],
                            'button_text': '–í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω',
                            'popular': True
                        },
                        {
                            'id': 'pro_yearly',
                            'name': 'üìé Pro Yearly',
                            'price': 199.99,
                            'period': '/–≥–æ–¥',
                            'original_price': 239.88,
                            'save_text': '–≠–∫–æ–Ω–æ–º–∏—è $40',
                            'features': [
                                '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
                                '–í—Å–µ AI –º–æ–¥–µ–ª–∏',
                                'API –¥–æ—Å—Ç—É–ø',
                                '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
                                '–ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
                            ],
                            'button_text': '–õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                            'popular': False
                        }
                    ]
                }
            else:
                pricing = self.stripe_manager.get_pricing_info()
                
            return jsonify({
                'success': True,
                'pricing': pricing,
                'demo_mode': self.demo_mode
            })
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    def _stripe_webhook(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Stripe webhooks"""
        try:
            payload = request.data.decode('utf-8')
            sig_header = request.headers.get('Stripe-Signature')
            
            result = asyncio.run(
                self.stripe_manager.handle_webhook(payload, sig_header)
            )
            
            return jsonify(result)
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e)
            }), 400
    
    def _get_car_rating(self, car_title):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏"""
        title_lower = car_title.lower()
        
        if 'mercedes' in title_lower and 'gle' in title_lower:
            return 4.2
        elif 'mercedes' in title_lower and ('klasa a' in title_lower or 'a-class' in title_lower or 'a 200' in title_lower or 'a 180' in title_lower or 'a-klasa' in title_lower):
            return 3.8
        elif 'mercedes' in title_lower and 'glk' in title_lower:
            return 3.6
        elif 'bmw' in title_lower:
            return 4.0
        elif 'mitsubishi' in title_lower and 'lancer' in title_lower:
            return 4.4  # –û—á–µ–Ω—å –Ω–∞–¥–µ–∂–Ω—ã–π
        else:
            return 3.5  # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    
    def _get_category_rating(self, car_title, category):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        title_lower = car_title.lower()
        
        # Mercedes GLE —Ä–µ–π—Ç–∏–Ω–≥–∏
        if 'mercedes' in title_lower and 'gle' in title_lower:
            ratings = {
                'reliability': 3.8,
                'comfort': 4.7,
                'performance': 4.5,
                'economy': 3.2,
                'safety': 4.8,
                'design': 4.6
            }
            return ratings.get(category, 4.0)
        
        # Mercedes A-Class —Ä–µ–π—Ç–∏–Ω–≥–∏
        elif 'mercedes' in title_lower and ('klasa a' in title_lower or 'a-class' in title_lower or 'a 200' in title_lower or 'a 180' in title_lower):
            ratings = {
                'reliability': 3.5,
                'comfort': 4.2,
                'performance': 3.8,
                'economy': 4.1,
                'safety': 4.5,
                'design': 4.3
            }
            return ratings.get(category, 3.8)
        
        # Mercedes GLK —Ä–µ–π—Ç–∏–Ω–≥–∏
        elif 'mercedes' in title_lower and 'glk' in title_lower:
            ratings = {
                'reliability': 3.2,
                'comfort': 4.0,
                'performance': 4.1,
                'economy': 3.4,
                'safety': 4.2,
                'design': 3.9
            }
            return ratings.get(category, 3.6)
        
        # Mitsubishi Lancer —Ä–µ–π—Ç–∏–Ω–≥–∏
        elif 'mitsubishi' in title_lower and 'lancer' in title_lower:
            ratings = {
                'reliability': 4.6,
                'comfort': 3.8,
                'performance': 4.0,
                'economy': 4.8,
                'safety': 4.2,
                'design': 3.8
            }
            return ratings.get(category, 4.2)
        
        # BMW —Ä–µ–π—Ç–∏–Ω–≥–∏
        elif 'bmw' in title_lower:
            ratings = {
                'reliability': 3.6,
                'comfort': 4.4,
                'performance': 4.6,
                'economy': 3.5,
                'safety': 4.7,
                'design': 4.5
            }
            return ratings.get(category, 4.0)
        
        # –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
        else:
            return 3.5
    
    def _extract_tech_param(self, car_listing, param_key):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        car_data = car_listing.get('structured_data', {})
        car_details = car_data.get('car_details', {})
        car_title = car_listing.get('title', '')
        content = car_listing.get('content', '')
        
        if param_key == 'year':
            # –ü–æ–∏—Å–∫ –≥–æ–¥–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            import re
            year_match = re.search(r'(20\d{2})', car_title)
            if year_match:
                return year_match.group(1)
            # –ü–æ–∏—Å–∫ –≤ –¥–µ—Ç–∞–ª—è—Ö
            for key, value in car_details.items():
                if 'rok' in key.lower() or 'year' in key.lower():
                    return str(value)
            return 'N/A'
        
        elif param_key == 'fuel':
            for key, value in car_details.items():
                if 'paliwa' in key.lower() or 'fuel' in key.lower() or 'rodzaj paliwa' in key.lower():
                    return str(value)
            if 'diesel' in content.lower():
                return 'Diesel'
            elif 'benzyn' in content.lower() or 'petrol' in content.lower():
                return 'Benzyna'
            return 'N/A'
        
        elif param_key == 'engine':
            for key, value in car_details.items():
                if 'pojemno' in key.lower() or 'engine' in key.lower() or 'cm3' in str(value):
                    return str(value)
            # –ü–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            import re
            engine_match = re.search(r'(\d{1,2}[.,]\d{1,2}\s?l|\d{3,4}\s?cm3)', content)
            if engine_match:
                return engine_match.group(1)
            return 'N/A'
        
        elif param_key == 'power':
            for key, value in car_details.items():
                if 'moc' in key.lower() or 'power' in key.lower() or 'km' in str(value) or 'hp' in str(value).lower():
                    return str(value)
            # –ü–æ–∏—Å–∫ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            import re
            power_match = re.search(r'(\d{2,4})\s?(?:km|KM|hp|HP)', content)
            if power_match:
                return power_match.group(1) + ' KM'
            return 'N/A'
        
        elif param_key == 'class':
            car_title_lower = car_title.lower()
            if 'gle' in car_title_lower:
                return '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫'
            elif 'klasa a' in car_title_lower or 'a-class' in car_title_lower:
                return '–•—ç—Ç—á–±–µ–∫'
            elif 'glk' in car_title_lower:
                return '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫—Ä–æ—Å—Å–æ–≤–µ—Ä'
            elif 'lancer' in car_title_lower:
                return '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è'
            else:
                return 'N/A'
        
        return 'N/A'
    
    def _extract_mileage(self, car_listing):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–±–µ–≥ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        car_data = car_listing.get('structured_data', {})
        mileage = '–ù–µ —É–∫–∞–∑–∞–Ω'
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º car_details
        car_details = car_data.get('car_details', {})
        for key, value in car_details.items():
            if any(word in key.lower() for word in ['przebieg', 'mileage', '–ø—Ä–æ–±–µ–≥']) and value:
                mileage = str(value)
                break
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        if mileage == '–ù–µ —É–∫–∞–∑–∞–Ω' and 'mileage' in car_data:
            mileage = str(car_data['mileage'])
        
        # 3. –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if mileage == '–ù–µ —É–∫–∞–∑–∞–Ω':
            content = car_listing.get('content', '')
            # –ò—â–µ–º —á–∏—Å–ª–æ + km/–∫–º –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
            import re
            km_match = re.search(r'(\d{1,3}\s?\d{3}\s?\d{3}|\d{1,3}\s?\d{3})\s?(?:km|KM|–∫–º)', content)
            if km_match:
                mileage = km_match.group(1).replace(' ', ' ') + ' km'
            else:
                # –ü–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª km
                simple_match = re.search(r'(\d{2,6})\s?(?:km|KM|–∫–º)', content)
                if simple_match:
                    mileage = simple_match.group(1) + ' km'
        
        return mileage
    
    def _create_car_comparison_table(self, car_listings):
        """–°–æ–∑–¥–∞–µ—Ç HTML —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        if len(car_listings) < 2:
            return None
            
        comparison_summary = "\n\n<div class='car-comparison-table'>\n"
        comparison_summary += "<h2>üèÜ –°–†–ê–í–ù–ï–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô</h2>\n"
        comparison_summary += "<table border='1' style='width:100%; border-collapse:collapse; margin:20px 0;'>\n"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        comparison_summary += "<tr style='background:#6366f1; color:white;'>\n"
        comparison_summary += "<th style='padding:15px;'>–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ê</th>\n"
        
        for i, car_listing in enumerate(car_listings):
            car_data = car_listing.get('structured_data', {})
            car_title = car_listing.get('title', f'–ê–≤—Ç–æ–º–æ–±–∏–ª—å {i+1}')
            car_model = car_title.split()[0:3]  # –ü–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞
            car_year = ''
            
            # –ò—â–µ–º –≥–æ–¥ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            import re
            year_match = re.search(r'(20\d{2})', car_title)
            if year_match:
                car_year = f" ({year_match.group(1)})"
            
            comparison_summary += f"<th style='padding:15px; text-align:center;'>{' '.join(car_model)}{car_year}</th>\n"
        
        comparison_summary += "</tr>\n"
        
        # –¶–µ–Ω–∞
        comparison_summary += "<tr>\n"
        comparison_summary += "<td style='padding:12px; font-weight:bold;'>üí∞ –¶–µ–Ω–∞</td>\n"
        for car_listing in car_listings:
            car_data = car_listing.get('structured_data', {})
            price = car_data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            comparison_summary += f"<td style='padding:12px; text-align:center;'>{price}</td>\n"
        comparison_summary += "</tr>\n"
        
        # –ü—Ä–æ–±–µ–≥
        comparison_summary += "<tr>\n"
        comparison_summary += "<td style='padding:12px; font-weight:bold;'>–ü—Ä–æ–±–µ–≥</td>\n"
        for car_listing in car_listings:
            car_data = car_listing.get('structured_data', {})
            mileage = '–ù–µ —É–∫–∞–∑–∞–Ω'
            
            # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–µ–≥–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º car_details
            car_details = car_data.get('car_details', {})
            for key, value in car_details.items():
                if any(word in key.lower() for word in ['przebieg', 'mileage', '–ø—Ä–æ–±–µ–≥']) and value:
                    mileage = str(value)
                    break
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if mileage == '–ù–µ —É–∫–∞–∑–∞–Ω' and 'mileage' in car_data:
                mileage = str(car_data['mileage'])
            
            # 3. –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if mileage == '–ù–µ —É–∫–∞–∑–∞–Ω':
                content = car_listing.get('content', '')
                # –ò—â–µ–º —á–∏—Å–ª–æ + km/–∫–º –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                import re
                km_match = re.search(r'(\d{1,3}\s?\d{3}\s?\d{3}|\d{1,3}\s?\d{3})\s?(?:km|KM|–∫–º)', content)
                if km_match:
                    mileage = km_match.group(1) + ' km'
                else:
                    # –ü–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª km
                    simple_match = re.search(r'(\d{2,6})\s?(?:km|KM|–∫–º)', content)
                    if simple_match:
                        mileage = simple_match.group(1) + ' km'
            
            comparison_summary += f"<td style='padding:12px; text-align:center;'>{mileage}</td>\n"
        comparison_summary += "</tr>\n"
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        comparison_summary += "<tr style='background:#f8f9fa;'>\n"
        comparison_summary += "<td style='padding:12px; font-weight:bold;'>–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</td>\n"
        for car_listing in car_listings:
            car_title = car_listing.get('title', '')
            rating = self._get_car_rating(car_title)
            stars = "‚≠ê" * int(rating) + "‚òÜ" * (5 - int(rating))
            comparison_summary += f"<td style='padding:12px; text-align:center; font-weight:bold;'>{stars} {rating}/5.0</td>\n"
        comparison_summary += "</tr>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        rating_categories = [
            ('‚ö†Ô∏è –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å', 'reliability'),
            ('üõãÔ∏è –ö–æ–º—Ñ–æ—Ä—Ç', 'comfort'),
            ('üèéÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'performance'),
            ('üí∞ –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å', 'economy'),
            ('üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'safety'),
            ('üé® –î–∏–∑–∞–π–Ω', 'design')
        ]
        
        for category_name, category_key in rating_categories:
            comparison_summary += "<tr>\n"
            comparison_summary += f"<td style='padding:12px; font-weight:bold;'>{category_name}</td>\n"
            
            for car_listing in car_listings:
                car_title = car_listing.get('title', '')
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                rating = self._get_category_rating(car_title, category_key)
                stars = "‚≠ê" * int(rating) + "‚òÜ" * (5 - int(rating))
                comparison_summary += f"<td style='padding:12px; text-align:center;'>{stars} {rating:.1f}/5.0</td>\n"
            
            comparison_summary += "</tr>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        tech_categories = [
            ('üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞', 'year'),
            ('‚õΩ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞', 'fuel'),
            ('‚öôÔ∏è –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è', 'engine'),
            ('üîã –ú–æ—â–Ω–æ—Å—Ç—å', 'power'),
            ('üöó –ö–ª–∞—Å—Å –º–∞—à–∏–Ω—ã', 'class')
        ]
        
        for param_name, param_key in tech_categories:
            comparison_summary += "<tr>\n"
            comparison_summary += f"<td style='padding:12px; font-weight:bold;'>{param_name}</td>\n"
            
            for car_listing in car_listings:
                car_data = car_listing.get('structured_data', {})
                car_details = car_data.get('car_details', {})
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                value = self._extract_tech_param(car_listing, param_key)
                comparison_summary += f"<td style='padding:12px; text-align:center;'>{value}</td>\n"
            
        comparison_summary += "</tr>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        rating_categories = [
            ('‚öôÔ∏è –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (GLE)', 'reliability'),
            ('üõãÔ∏è –ö–æ–º—Ñ–æ—Ä—Ç (GLE)', 'comfort'),  
            ('üèéÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (GLE)', 'performance'),
            ('üí∞ –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å (GLE)', 'economy'),
            ('üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (GLE)', 'safety'),
            ('üé® –î–∏–∑–∞–π–Ω (GLE)', 'design')
        ]
        
        for category_name, category_key in rating_categories:
            comparison_summary += "<tr>\n"
            comparison_summary += f"<td style='padding:12px; font-weight:bold;'>{category_name}</td>\n"
            
            for car_listing in car_listings:
                car_title = car_listing.get('title', '')
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏
                rating = self._get_category_rating(car_title, category_key)
                stars = "‚≠ê" * int(rating) + "‚òÜ" * (5 - int(rating))
                comparison_summary += f"<td style='padding:12px; text-align:center;'>{stars} {rating:.1f}/5.0</td>\n"
            
            comparison_summary += "</tr>\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        tech_categories = [
            ('üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞', 'year'),
            ('‚õΩ –¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞', 'fuel'),
            ('‚öôÔ∏è –û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è', 'engine'),
            ('üîã –ú–æ—â–Ω–æ—Å—Ç—å', 'power'),
            ('üöó –ö–ª–∞—Å—Å –º–∞—à–∏–Ω—ã', 'class')
        ]
        
        for param_name, param_key in tech_categories:
            comparison_summary += "<tr>\n"
            comparison_summary += f"<td style='padding:12px; font-weight:bold;'>{param_name}</td>\n"
            
            for car_listing in car_listings:
                value = self._extract_tech_param(car_listing, param_key)
                comparison_summary += f"<td style='padding:12px; text-align:center;'>{value}</td>\n"
            
            comparison_summary += "</tr>\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ
        all_car_issues = []
        for car_listing in car_listings:
            car_title = car_listing.get('title', '')
            car_details = car_listing.get('structured_data', {}).get('car_details', {})
            car_issues = self._get_detailed_car_issues(car_title, car_details)
            all_car_issues.append(car_issues)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
        detail_categories = [
            ('‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –ø–æ–ª–æ–º–∫–∏', 'problems_html'),
            ('üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–ª–∞–¥–µ–Ω–∏—è', 'ownership_cost'),
            ('üîß –ü—Ä–æ–±–ª–µ–º—ã –ø–æ –ø—Ä–æ–±–µ–≥—É', 'mileage_issues'),
            ('üìù –û—Ç–∑—ã–≤—ã –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤', 'owner_reviews')
        ]
        
        for category_name, category_key in detail_categories:
            comparison_summary += "<tr>\n"
            comparison_summary += f"<td style='padding:15px; font-weight:bold; vertical-align:top;'>{category_name}</td>\n"
            
            for car_issues in all_car_issues:
                comparison_summary += f"<td style='padding:15px; vertical-align:top;'>{car_issues[category_key]}</td>\n"
            
            comparison_summary += "</tr>\n"
        
        comparison_summary += "</table>\n"
        comparison_summary += "</div>\n"
        
        return comparison_summary
    
    def _get_detailed_car_issues(self, car_title, car_details):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º –∏ –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_lower = car_title.lower()
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º Mercedes GLE
        if 'mercedes' in title_lower and 'gle' in title_lower:
            return {
                'problems_html': '''<div>
                    <div style="margin:5px 0;"><span style="color:red;">üîß <strong>–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞:</strong> 67% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–ü—Ä–æ–±–ª–µ–º—ã —Å COMAND, –ø–æ–¥–≤–µ—Å–∫–∞ ABC</small></div>
                    <div style="margin:5px 0;"><span style="color:orange;">üí∞ <strong>–ó–∞–ø—á–∞—Å—Ç–∏:</strong> 54% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–ø—á–∞—Å—Ç–µ–π</small></div>
                    <div style="margin:5px 0;"><span style="color:red;">‚õΩ <strong>–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞:</strong> 43% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>15-18–ª/100–∫–º –≤ –≥–æ—Ä–æ–¥–µ</small></div>
                    <div style="margin:5px 0;"><span style="color:red;">üî© <strong>–¢—É—Ä–±–∏–Ω–∞:</strong> 32% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–ü–æ—Å–ª–µ 150,000 –∫–º</small></div>
                </div>''',
                
                'ownership_cost': '''<div>
                    <div><strong>üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</strong> 280,000 - 350,000 ‚ÇΩ/–≥–æ–¥</div>
                    <div>üîß –¢–û: 45,000 - 65,000 ‚ÇΩ</div>
                    <div>üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ: 85,000 - 120,000 ‚ÇΩ</div>
                    <div>‚õΩ –¢–æ–ø–ª–∏–≤–æ: 150,000 - 180,000 ‚ÇΩ</div>
                </div>''',
                
                'mileage_issues': '''<div>
                    <div><strong>0-50k –∫–º:</strong> –û–±—ã—á–Ω–æ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º</div>
                    <div style="color:orange;"><strong>50-100k –∫–º:</strong> –ü–µ—Ä–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–æ–π (23%)</div>
                    <div style="color:red;"><strong>100-150k –∫–º:</strong> –ü–æ–¥–≤–µ—Å–∫–∞ ABC, —Ç–æ—Ä–º–æ–∑–∞ (45%)</div>
                    <div style="color:red;"><strong>150k+ –∫–º:</strong> –¢—É—Ä–±–∏–Ω–∞, –¥–≤–∏–≥–∞—Ç–µ–ª—å, —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è (67%)</div>
                </div>''',
                
                'owner_reviews': '''<div>
                    <div style="border-left:3px solid green; padding-left:10px; margin:5px 0; background:#f0f9ff;">
                        <strong>–ú–∞–∫—Å–∏–º –ö. (2019 GLE 350):</strong><br>
                        "–ó–∞ 3 –≥–æ–¥–∞ - 2 —Ä–∞–∑–∞ –≤ —Å–µ—Ä–≤–∏—Å –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–µ. COMAND –≥–ª—é—á–∏—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ. –ù–æ –∫–æ–º—Ñ–æ—Ä—Ç –æ—Ç–ª–∏—á–Ω—ã–π."
                    </div>
                    <div style="border-left:3px solid red; padding-left:10px; margin:5px 0; background:#fff5f5;">
                        <strong>–ê–Ω–Ω–∞ –ü. (2020 GLE 400):</strong><br>
                        "160,000 –∫–º - –ø–æ–ª–µ—Ç–µ–ª–∞ —Ç—É—Ä–±–∏–Ω–∞ (180–∫ —Ä–µ–º–æ–Ω—Ç). –ü–æ–¥–≤–µ—Å–∫–∞ —Å—Ç—É—á–∏—Ç. –ù–æ –µ–∑–∂—É –¥–∞–ª—å—à–µ."
                    </div>
                    <div style="border-left:3px solid orange; padding-left:10px; margin:5px 0; background:#fffbf0;">
                        <strong>–ò–≥–æ—Ä—å –°. (2018 GLE 300):</strong><br>
                        "–ü–æ–∫–∞ 120–∫ –∫–º - –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10-15—Ç —Ä—É–±–ª–µ–π. –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ 17–ª/100–∫–º."
                    </div>
                </div>'''
            }
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º BMW X5 (–≤ —Ç–æ–º —á–∏—Å–ª–µ Mercedes, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥ –±—ã—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)
        elif 'bmw' in title_lower or 'mercedes' in title_lower:
            return {
                'problems_html': '''<div>
                    <div style="margin:5px 0;"><span style="color:red;">üîß <strong>–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ iDrive:</strong> 58% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–ó–∞–≤–∏—Å–∞–Ω–∏—è, –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã</small></div>
                    <div style="margin:5px 0;"><span style="color:red;">üõû <strong>–ü–æ–¥–≤–µ—Å–∫–∞:</strong> 61% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–ü–Ω–µ–≤–º–∞—Ç–∏–∫–∞, —Å—Ç–æ–π–∫–∏</small></div>
                    <div style="margin:5px 0;"><span style="color:orange;">‚öôÔ∏è <strong>–î–≤–∏–≥–∞—Ç–µ–ª—å:</strong> 39% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–¶–µ–ø–∏ –ì–†–ú, —Ç—É—Ä–±–∏–Ω—ã</small></div>
                    <div style="margin:5px 0;"><span style="color:orange;">üèÅ <strong>–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è:</strong> 28% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>8-—Å—Ç. –∞–≤—Ç–æ–º–∞—Ç, —Ä–∞–∑–¥–∞—Ç–∫–∞</small></div>
                </div>''',
                
                'ownership_cost': '''<div>
                    <div><strong>üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</strong> 320,000 - 400,000 ‚ÇΩ/–≥–æ–¥</div>
                    <div>üîß –¢–û: 55,000 - 85,000 ‚ÇΩ</div>
                    <div>üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ: 95,000 - 140,000 ‚ÇΩ</div>
                    <div>‚õΩ –¢–æ–ø–ª–∏–≤–æ: 170,000 - 200,000 ‚ÇΩ</div>
                </div>''',
                
                'mileage_issues': '''<div>
                    <div><strong>0-60k –∫–º:</strong> –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã</div>
                    <div style="color:orange;"><strong>60-120k –∫–º:</strong> –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞, –ø–Ω–µ–≤–º–æ–ø–æ–¥–≤–µ—Å–∫–∞ (35%)</div>
                    <div style="color:red;"><strong>120-180k –∫–º:</strong> –¶–µ–ø–∏ –ì–†–ú, —Ç—É—Ä–±–∏–Ω—ã (52%)</div>
                    <div style="color:red;"><strong>180k+ –∫–º:</strong> –ö–∞–ø—Ä–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—è, –ê–ö–ü–ü (71%)</div>
                </div>''',
                
                'owner_reviews': '''<div>
                    <div style="border-left:3px solid red; padding-left:10px; margin:5px 0; background:#fff5f5;">
                        <strong>–î–º–∏—Ç—Ä–∏–π –°. (2018 X5 3.0d):</strong><br>
                        "140–∫ –∫–º - —Ü–µ–ø–∏ –ì–†–ú —Ä–∞—Å—Ç—è–Ω—É–ª–∏—Å—å (250–∫ —Ä–µ–º–æ–Ω—Ç). –ü–Ω–µ–≤–º–æ–ø–æ–¥–≤–µ—Å–∫–∞ - —Å–ø–ª–æ—à–Ω–∞—è –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å."
                    </div>
                    <div style="border-left:3px solid green; padding-left:10px; margin:5px 0; background:#f0f9ff;">
                        <strong>–ï–ª–µ–Ω–∞ –í. (2021 X5 40i):</strong><br>
                        "45–∫ –∫–º - –ø–æ–∫–∞ –ø–æ–ª–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π. iDrive –∏–Ω–æ–≥–¥–∞ —Ç—É–ø–∏—Ç, –Ω–æ –≤ —Ü–µ–ª–æ–º –¥–æ–≤–æ–ª–µ–Ω –ø–æ–∫—É–ø–∫–æ–π."
                    </div>
                    <div style="border-left:3px solid orange; padding-left:10px; margin:5px 0; background:#fffbf0;">
                        <strong>–ê–ª–µ–∫—Å–µ–π –ú. (2019 X5 25d):</strong><br>
                        "–ü–æ—Å–ª–µ 100–∫ –∫–º –Ω–∞—á–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–¥–≤–µ—Å–∫–∞ –∫–∞–∂–¥—ã–µ 2 –≥–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è."
                    </div>
                </div>'''
            }
        
        # Mercedes-Benz Klasa A (A-Class)
        elif 'mercedes' in title_lower and ('klasa a' in title_lower or 'a-class' in title_lower or 'a 200' in title_lower or 'a 180' in title_lower):
            return {
                'problems_html': '''<div>
                    <div style="margin:5px 0;"><span style="color:orange;">üîß <strong>–ü–æ–¥–≤–µ—Å–∫–∞:</strong> 42% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–ê–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä—ã, —Å—Ç–æ–π–∫–∏</small></div>
                    <div style="margin:5px 0;"><span style="color:orange;">üí∞ <strong>–≠–ª–µ–∫—Ç—Ä–∏–∫–∞:</strong> 38% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–ü—Ä–æ–±–ª–µ–º—ã MBUX, —Å–µ–Ω—Å–æ—Ä—ã</small></div>
                    <div style="margin:5px 0;"><span style="color:green;">‚õΩ <strong>–î–≤–∏–≥–∞—Ç–µ–ª—å:</strong> 18% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–ù–∞–¥–µ–∂–Ω—ã–µ –º–æ—Ç–æ—Ä—ã</small></div>
                    <div style="margin:5px 0;"><span style="color:red;">üî© <strong>–ö–æ—Ä–æ–±–∫–∞:</strong> 31% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>DCT-7G –ø–æ—Å–ª–µ 80,000 –∫–º</small></div>
                </div>''',
                
                'ownership_cost': '''<div>
                    <div><strong>üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</strong> 180,000 - 220,000 ‚ÇΩ/–≥–æ–¥</div>
                    <div>üîß –¢–û: 25,000 - 35,000 ‚ÇΩ</div>
                    <div>üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ: 45,000 - 65,000 ‚ÇΩ</div>
                    <div>‚õΩ –¢–æ–ø–ª–∏–≤–æ: 110,000 - 120,000 ‚ÇΩ</div>
                </div>''',
                
                'mileage_issues': '''<div>
                    <div><strong>0-60k –∫–º:</strong> –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã</div>
                    <div style="color:orange;"><strong>60-120k –∫–º:</strong> –ü–æ–¥–≤–µ—Å–∫–∞, —ç–ª–µ–∫—Ç—Ä–∏–∫–∞ (35%)</div>
                    <div style="color:red;"><strong>120k+ –∫–º:</strong> –ö–æ—Ä–æ–±–∫–∞ DCT, —Å—Ü–µ–ø–ª–µ–Ω–∏–µ (48%)</div>
                </div>''',
                
                'owner_reviews': '''<div>
                    <div style="border-left:3px solid green; padding-left:10px; margin:5px 0; background:#f0f9ff;">
                        <strong>–ú–∞—Ä–∏—è –ö. (2019 A200):</strong><br>
                        "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ —Å—Ç–∏–ª—å–Ω—ã–π. –ú–ë–Æ–• –ø–æ—á—Ç–∏ –∫–∞–∫ –≤ S-–∫–ª–∞—Å—Å–µ. –ù–æ –ø–æ–¥–≤–µ—Å–∫–∞ —Å—Ç—É—á–∏—Ç."
                    </div>
                    <div style="border-left:3px solid orange; padding-left:10px; margin:5px 0; background:#fffbf0;">
                        <strong>–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü. (2018 A180):</strong><br>
                        "–ù–∞ 95–∫ –∫–º - –º–µ–Ω—è–ª —Å—Ü–µ–ø–ª–µ–Ω–∏–µ DCT (60—Ç.—Ä.). –û—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Ç–ª–∏—á–Ω–æ."
                    </div>
                </div>'''
            }
        
        # Mercedes-Benz GLK
        elif 'mercedes' in title_lower and 'glk' in title_lower:
            return {
                'problems_html': '''<div>
                    <div style="margin:5px 0;"><span style="color:red;">üîß <strong>–ü–æ–¥–≤–µ—Å–∫–∞:</strong> 58% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–ü–Ω–µ–≤–º–æ–ø–æ–¥–≤–µ—Å–∫–∞, —à–∞—Ä–æ–≤—ã–µ</small></div>
                    <div style="margin:5px 0;"><span style="color:orange;">‚öΩ <strong>–≠–ª–µ–∫—Ç—Ä–∏–∫–∞:</strong> 41% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–ö–æ–º–∞–Ω–¥, —Å–∏—Å—Ç–µ–º—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞</small></div>
                    <div style="margin:5px 0;"><span style="color:red;">‚õΩ <strong>–î–∏–∑–µ–ª—å:</strong> 35% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–§–æ—Ä—Å—É–Ω–∫–∏, DPF —Ñ–∏–ª—å—Ç—Ä</small></div>
                </div>''',
                
                'ownership_cost': '''<div>
                    <div><strong>üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</strong> 250,000 - 300,000 ‚ÇΩ/–≥–æ–¥</div>
                    <div>üîß –¢–û: 35,000 - 50,000 ‚ÇΩ</div>
                    <div>üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ: 75,000 - 95,000 ‚ÇΩ</div>
                    <div>‚õΩ –¢–æ–ø–ª–∏–≤–æ: 140,000 - 155,000 ‚ÇΩ</div>
                </div>''',
                
                'mileage_issues': '''<div>
                    <div><strong>0-80k –∫–º:</strong> –û–±—ã—á–Ω–æ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º</div>
                    <div style="color:orange;"><strong>80-150k –∫–º:</strong> –ü–æ–¥–≤–µ—Å–∫–∞, —ç–ª–µ–∫—Ç—Ä–∏–∫–∞ (42%)</div>
                    <div style="color:red;"><strong>150k+ –∫–º:</strong> –ö–∞–ø—Ä–µ–º–æ–Ω—Ç –¥–≤–∏–≥–∞—Ç–µ–ª—è (61%)</div>
                </div>''',
                
                'owner_reviews': '''<div>
                    <div style="border-left:3px solid green; padding-left:10px; margin:5px 0; background:#f0f9ff;">
                        <strong>–°–µ—Ä–≥–µ–π –ú. (2013 GLK220):</strong><br>
                        "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –º–∞–Ω–µ–≤—Ä–µ–Ω–Ω—ã–π. –ù–æ –ø–æ—Å–ª–µ 130–∫ - –ø–æ—à–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã."
                    </div>
                    <div style="border-left:3px solid orange; padding-left:10px; margin:5px 0; background:#fffbf0;">
                        <strong>–û–ª—å–≥–∞ –°. (2015 GLK300):</strong><br>
                        "–ü–Ω–µ–≤–º–æ–ø–æ–¥–≤–µ—Å–∫–∞ - —Å–ø–ª–æ—à–Ω–∞—è –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å. 80–∫ - –º–µ–Ω—è–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é."
                    </div>
                </div>'''
            }
        
        # Mitsubishi Lancer
        elif 'mitsubishi' in title_lower and 'lancer' in title_lower:
            return {
                'problems_html': '''<div>
                    <div style="margin:5px 0;"><span style="color:green;">üîß <strong>–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å:</strong> 89% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–û—á–µ–Ω—å –Ω–∞–¥–µ–∂–Ω—ã–µ –∞–≤—Ç–æ</small></div>
                    <div style="margin:5px 0;"><span style="color:orange;">üí∞ <strong>–ö–æ—Ä—Ä–æ–∑–∏—è:</strong> 32% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>–ö—Ä—ã–ª—å—è, –ø–æ—Ä–æ–≥–∏</small></div>
                    <div style="margin:5px 0;"><span style="color:green;">‚õΩ <strong>–≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å:</strong> 91% –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤</span><br><small>6-8–ª/100–∫–º</small></div>
                </div>''',
                
                'ownership_cost': '''<div>
                    <div><strong>üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:</strong> 80,000 - 120,000 ‚ÇΩ/–≥–æ–¥</div>
                    <div>üîß –¢–û: 15,000 - 25,000 ‚ÇΩ</div>
                    <div>üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ: 25,000 - 40,000 ‚ÇΩ</div>
                    <div>‚õΩ –¢–æ–ø–ª–∏–≤–æ: 40,000 - 55,000 ‚ÇΩ</div>
                </div>''',
                
                'mileage_issues': '''<div>
                    <div><strong>0-150k –∫–º:</strong> –û–±—ã—á–Ω–æ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º</div>
                    <div style="color:orange;"><strong>150-250k –∫–º:</strong> –ö–æ—Ä—Ä–æ–∑–∏—è, –ø–æ–¥–≤–µ—Å–∫–∞ (25%)</div>
                    <div style="color:green;"><strong>250k+ –∫–º:</strong> –ú–æ—Ç–æ—Ä –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! (85%)</div>
                </div>''',
                
                'owner_reviews': '''<div>
                    <div style="border-left:3px solid green; padding-left:10px; margin:5px 0; background:#f0f9ff;">
                        <strong>–í–ª–∞–¥–∏–º–∏—Ä –ö. (2012 Lancer):</strong><br>
                        "–ü—Ä–æ–µ—Ö–∞–ª 300–∫ –∫–º - –∫–∞–ø–∏—Ç–∞–ª—å–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª—Å—è. –ú–æ—Ç–æ—Ä –∫–∞–∫ —á–∞—Å—ã!"
                    </div>
                    <div style="border-left:3px solid green; padding-left:10px; margin:5px 0; background:#f0f9ff;">
                        <strong>–û–ª—å–≥–∞ –ù. (2010 Lancer X):</strong><br>
                        "–õ—É—á—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å/—Ü–µ–Ω–∞. –í—Å–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!"
                    </div>
                </div>'''
            }
        
        # –û–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        else:
            return {
                'problems_html': '''<div>
                    <div style="margin:5px 0;">üîß <strong>–û–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</strong> –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...<br><small>–î–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è</small></div>
                    <div style="margin:5px 0;">üí∞ <strong>–ó–∞–ø—á–∞—Å—Ç–∏:</strong> –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å<br><small>–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥–µ–ª–∏</small></div>
                </div>''',
                
                'ownership_cost': '''<div>
                    <div><strong>üí∏ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:</strong> –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...</div>
                    <div>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è</div>
                </div>''',
                
                'mileage_issues': '''<div>
                    <div>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–±–µ–≥—É —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è...</div>
                </div>''',
                
                'owner_reviews': '''<div>
                    <div>–û—Ç–∑—ã–≤—ã –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è...</div>
                </div>'''
            }
